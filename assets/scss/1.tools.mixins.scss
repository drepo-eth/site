/**
 *  Breakpoints for exclusive media queries
 *  @params $media: sm | md | lg | xl | xs-md | md-xl
 */
@mixin breakpoint($media) {
  @if $media == sm {
    @media only screen and (max-width: map-get($breakpoints, sm-max)) {
      @content;
    }
  } @else if $media == md {
    @media only screen and (min-width: map-get($breakpoints, md-min)) and (max-width: (map-get($breakpoints, md-max))) {
      @content;
    }
  } @else if $media == lg {
    @media print, screen and (min-width: map-get($breakpoints, lg-min)) {
      @content;
    }
  } @else if $media == xl {
    @media print, screen and (min-width: map-get($breakpoints, xl-min)) {
      @content;
    }
  } @else if $media == sm-md {
    @media only screen and (max-width: map-get($breakpoints, md-max)) {
      @content;
    }
  } @else if $media == md-xl {
    @media print, screen and (min-width: map-get($breakpoints, md-min)) {
      @content;
    }
  }
}


/**
 *  Breakpoints for exclusive container queries based on div.main
 *  @params $media: sm | md | lg | xl | xs-md | md-xl
 */
@mixin break-main($media) {
  @if $media == sm {
    @container main (max-width: #{map-get($breakpoints, sm-max)}) {
      @content;
    }
  } @else if $media == md {
    @container main (min-width: #{map-get($breakpoints, md-min)}) and (max-width: #{map-get($breakpoints, md-max)}) {
      @content;
    }
  }@else if $media == lg {
    @container main (min-width: #{map-get($breakpoints, lg-min)}) {
      @content;
    }
  } @else if $media == xl {
    @container main (min-width: #{map-get($breakpoints, xl-min)}) {
      @content;
    }
  } @else if $media == sm-md {
    @container main (max-width: #{map-get($breakpoints, md-max)}) {
      @content;
    }
  } @else if $media == md-xl {
    @container main (min-width: #{map-get($breakpoints, md-min)}) {
      @content;
    }
  }
}

/**
 * Convert px to rem
 */
@function pxToRem($px: 12px, $base: 16px) {
  @return ($px / $base * 1rem);
}

/*
 * Get column in %
 */
@function column($col, $base) {
  $value: (100% / $base * $col);
  @return $value;
}

/**
 * No transition for sure
 */
.no-transition * {
  transition: none !important;
}

/**
 * MIXIN: Scrollbar
 */
@mixin scrollbar ($margin: 0) {
  scrollbar-width: thin;
  scrollbar-color: var(--color-thumb-bg) var(--color-scrollbar-bg);
  
  &::-webkit-scrollbar {
    width: pxToRem(12px);
  }
  
  &::-webkit-scrollbar-thumb {
    border-radius: pxToRem(6px);
    background-color: var(--color-scrollbar-bg);
    border: 1px solid var(--color-thumb-bg);
  }
  
  &::-webkit-scrollbar-track {
    background: var(--color-thumb-bg);
  }
  
  &::-webkit-scrollbar-track-piece:start {
    margin-top: $margin;
  }
  
  &::-webkit-scrollbar-track-piece:end {
    margin-bottom: $margin;
  }
}


/**
 *  Clear floats
 */
@mixin clearfix() {
  *zoom: 1;
  
  &::before,
  &::after {
	content: ' ';
	display: table;
  }
  
  &::after {
	clear: both;
  }
}


@mixin reset-button() {
  appearance: none;
  border: none;
  outline: none;
  cursor: pointer;
  background-color: transparent;
}